- fail:
    msg: "Make sure we've authenticated to the cluster before running this role"
  when: k8s_auth_results.k8s_auth.api_key is not defined

- name: Deploy machine health checks
  k8s:
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    validate_certs: no
    state: present
    resource_definition:
      apiVersion: machine.openshift.io/v1beta1
      kind: MachineHealthCheck
      metadata:
        name: "{{ item }}-healthcheck"
        namespace: openshift-machine-api
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-cluster: "{{ openshift_unique_cluster_name }}"
            machine.openshift.io/cluster-api-machine-role: "{{ item }}"
            machine.openshift.io/cluster-api-machine-type: "{{ item }}"
            machine.openshift.io/cluster-api-machineset: "{{ openshift_unique_cluster_name }}-{{ item }}"
        unhealthyConditions:
          - type: Ready
            status: Unknown
            timeout: "{{ health_check_timeout }}"
          - type: Ready
            status: 'False'
            timeout: "{{ health_check_timeout }}"
        maxUnhealthy: "{{ health_check_maxunhealthy }}"
  when: item != "master"
  loop: "{{ machine_role }}"

- name: get healthchecks
  vars:
    go_template: !unsafe '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
  command: "oc
           get machinehealthchecks 
           -n openshift-machine-api 
           -o go-template='{{ go_template }}'
           --token {{ k8s_auth_results.k8s_auth.api_key }}
           --insecure-skip-tls-verify=true
           --server=https://api.{{ cluster_name }}.{{ openshift_base_domain }}:6443"
  register: healthchecks_verify_result

- name: print
  debug:
    var: healthchecks_verify_result.stdout
    verbosity: 1

- name: verify healthchecks
  assert:
    that:
      - '"{{ item }}-healthcheck" in healthchecks_verify_result.stdout'
    fail_msg: "The {{ item }}-healthcheck did not get created correctly"
    success_msg: "The {{ item }}-healthcheck you requested are ready"
  when: item != "master"
  loop: "{{ machine_role }}"
  until: healthchecks_verify_result.stdout.find("{{ item }}-healthcheck") !=-1
  retries: "{{ num_retries }}"
  delay: "{{ num_delay }}"
  changed_when: false
